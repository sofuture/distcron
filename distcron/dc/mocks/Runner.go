package mocks

import context "golang.org/x/net/context"
import dc "distcron/dc"
import mock "github.com/stretchr/testify/mock"

// Runner is an autogenerated mock type for the Runner type
type Runner struct {
	mock.Mock
}

// GetJobOutput provides a mock function with given fields: ctx, cid, fn
func (_m *Runner) GetJobOutput(ctx context.Context, cid string, fn dc.DataCopyFn) error {
	ret := _m.Called(ctx, cid, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, dc.DataCopyFn) error); ok {
		r0 = rf(ctx, cid, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetJobStatus provides a mock function with given fields: ctx, cid
func (_m *Runner) GetJobStatus(ctx context.Context, cid string) (*dc.JobStatus, error) {
	ret := _m.Called(ctx, cid)

	var r0 *dc.JobStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) *dc.JobStatus); ok {
		r0 = rf(ctx, cid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dc.JobStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunJob provides a mock function with given fields: ctx, job
func (_m *Runner) RunJob(ctx context.Context, job *dc.Job) (string, error) {
	ret := _m.Called(ctx, job)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *dc.Job) string); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dc.Job) error); ok {
		r1 = rf(ctx, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopJob provides a mock function with given fields: ctx, cid
func (_m *Runner) StopJob(ctx context.Context, cid string) (*dc.JobStatus, error) {
	ret := _m.Called(ctx, cid)

	var r0 *dc.JobStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) *dc.JobStatus); ok {
		r0 = rf(ctx, cid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dc.JobStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
