package mocks

import dc "distcron/dc"
import mock "github.com/stretchr/testify/mock"

// RpcInfo is an autogenerated mock type for the RpcInfo type
type RpcInfo struct {
	mock.Mock
}

// GetLeaderNode provides a mock function with given fields:
func (_m *RpcInfo) GetLeaderNode() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeName provides a mock function with given fields:
func (_m *RpcInfo) GetNodeName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRpcForNode provides a mock function with given fields: node
func (_m *RpcInfo) GetRpcForNode(node string) (dc.DistCronClient, error) {
	ret := _m.Called(node)

	var r0 dc.DistCronClient
	if rf, ok := ret.Get(0).(func(string) dc.DistCronClient); ok {
		r0 = rf(node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dc.DistCronClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLeader provides a mock function with given fields:
func (_m *RpcInfo) IsLeader() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetRpcForNode provides a mock function with given fields: node, addr
func (_m *RpcInfo) SetRpcForNode(node string, addr string) error {
	ret := _m.Called(node, addr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(node, addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
