package mocks

import context "golang.org/x/net/context"
import dc "distcron/dc"
import mock "github.com/stretchr/testify/mock"

// DistCronServer is an autogenerated mock type for the DistCronServer type
type DistCronServer struct {
	mock.Mock
}

// GetJobOutput provides a mock function with given fields: _a0, _a1
func (_m *DistCronServer) GetJobOutput(_a0 *dc.JobHandle, _a1 dc.DistCron_GetJobOutputServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dc.JobHandle, dc.DistCron_GetJobOutputServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetJobStatus provides a mock function with given fields: _a0, _a1
func (_m *DistCronServer) GetJobStatus(_a0 context.Context, _a1 *dc.JobHandle) (*dc.JobStatus, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dc.JobStatus
	if rf, ok := ret.Get(0).(func(context.Context, *dc.JobHandle) *dc.JobStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dc.JobStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dc.JobHandle) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunJob provides a mock function with given fields: _a0, _a1
func (_m *DistCronServer) RunJob(_a0 context.Context, _a1 *dc.Job) (*dc.JobHandle, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dc.JobHandle
	if rf, ok := ret.Get(0).(func(context.Context, *dc.Job) *dc.JobHandle); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dc.JobHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dc.Job) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunJobOnThisNode provides a mock function with given fields: _a0, _a1
func (_m *DistCronServer) RunJobOnThisNode(_a0 context.Context, _a1 *dc.Job) (*dc.JobHandle, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dc.JobHandle
	if rf, ok := ret.Get(0).(func(context.Context, *dc.Job) *dc.JobHandle); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dc.JobHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dc.Job) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopJob provides a mock function with given fields: _a0, _a1
func (_m *DistCronServer) StopJob(_a0 context.Context, _a1 *dc.JobHandle) (*dc.JobStatus, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dc.JobStatus
	if rf, ok := ret.Get(0).(func(context.Context, *dc.JobHandle) *dc.JobStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dc.JobStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dc.JobHandle) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
